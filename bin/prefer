#!/usr/bin/env python
# -*- coding: utf-8 -*-

from collections import OrderedDict
import readline
import string
import sys


TEMPLATES = {
    'book': '\n@book{{{key},\n'
            '\ttitle="{title}",\n'
            '\tauthor="{author}",\n'
            '\tyear="{year}",\n'
            '\tseries="{series}",\n'
            '\tnumber="{number}",\n'
            '\tedition="{edition}",\n'
            '\tlocation="{location}",\n'
            '\tpublisher="{publisher}"\n'
            '}}\n',
    'article': '\n@article{{{key},\n'
               '\ttitle="{title}",\n'
               '\tauthor="{author}",\n'
               '\tyear="{year}",\n'
               '\tjournal="{journal}",\n'
               '\tvolume="{volume}",\n'
               '\tpages="{pages}"\n'
               '}}\n',
    'in': '\n@in{in_what}{{{key},\n'
          '\ttitle="{title}",\n'
          '\tbooktitle="{booktitle}",\n'
          '\tauthor="{author}",\n'
          '\teditor="{editor}",\n'
          '\tpublisher="{publisher}",\n'
          '\tyear="{year}",\n'
          '\tpages="{pages}\n'
          '}}\n'
}


def get_fields(template):
    formatter = string.Formatter()
    return OrderedDict((fn, None) for _, fn, _, _ in formatter.parse(template)
                       if fn)


def get_input(t):
    fields = {k: input('{}: '.format(k)) for k in get_fields(t).keys()}
    return t.format_map(fields)


def halp():
    return 'Usage: {} [book | article | in]' \
           '--help'.format(sys.argv[0])


if __name__ == "__main__":
    try:
        if sys.argv[1].startswith('in'):
            entry = get_input(TEMPLATES['in'])
        else:
            entry = get_input(TEMPLATES[sys.argv[1]])
    except KeyError as e:
        raise SystemExit('Error: {} template not present\n'.format(e))
    except IndexError:
        raise SystemExit(halp())

    rfile = 'refs.bib'
    with open(rfile, 'a') as rf:
        rf.write(entry)
